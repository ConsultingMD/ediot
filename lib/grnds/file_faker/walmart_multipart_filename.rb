require_relative 'filename'

module Grnds
  module FileFaker
    # Generates a filename sequence for a Walmart multipart eligibility file. The filenames are as follows:
    #
    #    X12~005010X220A1~834~OUT-C.N.N.YYYY-MM-DD_HH-MM-SS
    #
    # where:
    #
    #    X12~005010X220A1~834~OUT        Identifies each part as an X12 EDI 834 (eligibility) file conforming to version 5010,
    #                                    sub-version 220A1.
    #
    #    C                               Walmart AS2 client number. Walmart currently has two active clients that communicate
    #                                    with Grand Rounds, numbered 1 and 5. All parts for a transmitted file are assumed to
    #                                    originate from the same client.
    #
    #    N.N                             Two sequence numbers of unknown use. They are set to random values between 0 and
    #                                    999_999.
    #
    #    YYYY-MM-DD                      Date stamp of file part.
    #
    #    HH-MM-SS                        Time stamp of file part.
    #
    # Currently, the Walmart eligibility files comes in 4 parts.
    class WalmartMultipartFilename < Filename
      PREFIX = 'X12~005010X220A1~834~OUT-'.freeze

      # Creates a new Walmart multipart filename generator for the specified number of files (parts), originating from the
      # specified client. The first filename will be based on the specified time. If cross_midnight is true, then the
      # final filename in the sequence generated by this instance will contain an embedded timestamp that's roughly 23
      # hours later than the timestamp embedded in any other filename in the sequence.
      def initialize(now = Time.now, nfiles = 4, client = 1, cross_midnight: false)
        super(now, nfiles, PREFIX)
        @base = PREFIX +
                client.to_s + '.' +
                rand(1_000_000).to_s + '.' +
                rand(1_000_000).to_s + '.'

        @cross_midnight = cross_midnight
      end

      # Generates the current filename based on the current state.
      def current_file
        @base + @now.strftime('%F_%H-%M-%S')
      end

      def next_file
        return super unless @cross_midnight

        # Generate the final filename so that its embedded timestamp contains a
        # later date than the timestamp embedded in any other filename generated
        # by this instance.
        super.tap do |name|
          @now += 24.hours if @next == @nfiles
        end
      end
    end
  end
end
